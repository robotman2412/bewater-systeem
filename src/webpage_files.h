// LOL WHO FILES
#define NUM_WEBPAGE_FILES 4
char *webpage_file_index_css =
"\n"
"body {\n"
"\tbackground-color: #2694dd;\n"
"\tmargin: 0;\n"
"\tpadding: 1em 2em;\n"
"}\n"
"\n"
"div {\n"
"\tbox-sizing: border-box;\n"
"}\n"
"\n"
"div.content {\n"
"\tmargin: auto;\n"
"\ttop: 0;\n"
"\tbottom: 0;\n"
"\tmax-width: 40em;\n"
"\tbackground-color: #ffffff;\n"
"\tpadding: 1em;\n"
"\tbox-shadow: 0 5px 12px rgba(0,0,0,0.25);\n"
"}\n"
"\n"
".mobile div.content {\n"
"\tleft: 2em;\n"
"\tright: 2em;\n"
"\tfont-size: 200%;\n"
"}\n"
"\n"
".mobile div.zone {\n"
"\tfont-size: 150%;\n"
"\tborder-width: 4px;\n"
"}\n"
"\n"
"div.zone {\n"
"\twidth: 100%;\n"
"\tpadding: 3px;\n"
"\tmargin-top: 0.5em;\n"
"\tmargin-bottom: 0.5em;\n"
"\tborder: 2px solid #c5c5c5;\n"
"\tborder-radius: 12px;\n"
"\ttransition: border-color, background-color 0.5s;\n"
"}\n"
"\n"
"div.zone div {\n"
"\tpadding: 0.125em 0.75em;\n"
"\tborder-radius: 7px;\n"
"\ttransition: color, background-color 0.5s;\n"
"}\n"
"\n"
"div.zone-on {\n"
"\tborder: 2px solid #3fb1fd;\n"
"}\n"
"\n"
"div.zone-on div {\n"
"\tbackground-color: #3fb1fd;\n"
"\tcolor: #000000;\n"
"}\n"
"\n"
"div.zone-pending-on {\n"
"\tborder: 2px solid #3fb1fd;\n"
"}\n"
"\n"
"div.zone-pending-on div {\n"
"\tbackground-color: #ffffff;\n"
"\tcolor: #000000;\n"
"}\n"
"\n"
"div.zone-pending-off {\n"
"\tborder: 2px solid #c5c5c5;\n"
"}\n"
"\n"
"div.zone-pending-off div {\n"
"\tbackground-color: #c5c5c5;\n"
"\tcolor: #000000;\n"
"}\n"
"\n"
"@keyframes error {\n"
"\t0% { }\n"
"\t20% { transform: translateX(-4px); border: 2px solid #ff5f5f; }\n"
"\t40% { transform: translateX( 4px); border: 2px solid #ff5f5f; }\n"
"\t60% { transform: translateX(-4px); border: 2px solid #ff5f5f; }\n"
"\t80% { transform: translateX( 4px); border: 2px solid #ff5f5f; }\n"
"\t100% { }\n"
"}\n"
"\n"
"@keyframes error-mobile {\n"
"\t0% { }\n"
"\t20% { transform: translateX(-12px); border: 4px solid #ff5f5f; }\n"
"\t40% { transform: translateX( 12px); border: 4px solid #ff5f5f; }\n"
"\t60% { transform: translateX(-12px); border: 4px solid #ff5f5f; }\n"
"\t80% { transform: translateX( 12px); border: 4px solid #ff5f5f; }\n"
"\t100% { }\n"
"}\n"
"\n"
".mobile div.zone-error {\n"
"\tanimation: error-mobile 0.5s !important;\n"
"}\n"
"\n"
"div.zone-error {\n"
"\tanimation: error 0.5s;\n"
"}";
char *webpage_file_index_html =
"<!DOCTYPE html>\n"
"<html>\n"
"\t<head>\n"
"\t\t<title>Bewatersysteem</title>\n"
"\t\t<script src=\"index.js\"></script>\n"
"\t\t<link rel=\"stylesheet\" href=\"index.css\" type=\"text/css\">\n"
"\t</head>\n"
"\t<body onload=\"loaded()\">\n"
"\t\t<div class=\"content\">\n"
"\t\t\t<h1 style=\"text-align:center\">BEWATERSYSTEEM</h1>\n"
"\t\t\t<div id=\"zones\"></div>\n"
"\t\t</div>\n"
"\t</body>\n"
"</html>";
char *webpage_file_index_js =
"\n"
"// Holder for zone elements.\n"
"var zonesElem;\n"
"// Whether or not this is a mobile device.\n"
"let isMobile = false;\n"
"// A list of zones.\n"
"let zones = [\n"
"\t{ index: 0, name: \"Licht\",   id: \"ledinar\", state: false },\n"
"\t{ index: 1, name: \"Zone #1\", id: \"zone1\",   state: false },\n"
"\t{ index: 2, name: \"Zone #2\", id: \"zone2\",   state: false },\n"
"\t{ index: 3, name: \"Zone #3\", id: \"zone3\",   state: false },\n"
"\t{ index: 4, name: \"Zone #4\", id: \"zone4\",   state: false },\n"
"\t{ index: 5, name: \"Pomp\",    id: \"pump\",    state: false },\n"
"];\n"
"// Map from pin ID to zone index.\n"
"let idToZone = {};\n"
"// Description of schedule id.\n"
"let excToDesc = {\n"
"\tnone: \"N/A\",\n"
"\tpin: \"Interactie met schema\",\n"
"\tany: \"Alle interactie\",\n"
"};\n"
"// Timer for update.\n"
"var updateTimer;\n"
"// Used to check if states are identical.\n"
"var stateMagic;\n"
"\n"
"\n"
"// Called when the body is loaded.\n"
"function loaded() {\n"
"\t// Generate some content.\n"
"\tzonesElem = document.getElementById(\"zones\");\n"
"\tfor (i in zones) {\n"
"\t\tidToZone[zones[i].id] = i;\n"
"\t\tzonesElem.innerHTML += '<div id=\"zone_'+i+'\" class=\"zone\" onclick=\"toggle(this, '+i+')\"><div>'+zones[i].name+'</div></div>';\n"
"\t}\n"
"\t// Set the update thing.\n"
"\tupdateTimer = setInterval(update, 1000);\n"
"\tupdate();\n"
"\t// Do not update on blur.\n"
"\twindow.onblur = () => {\n"
"\t\tclearInterval(updateTimer);\n"
"\t\tupdateTimer = null;\n"
"\t}\n"
"\t// Continue to update on focus.\n"
"\twindow.onfocus = () => {\n"
"\t\tif (updateTimer) clearInterval(updateTimer);\n"
"\t\tupdateTimer = setInterval(update, 1000);\n"
"\t\tupdate();\n"
"\t};\n"
"}\n"
"\n"
"// Update the style of elem to reflect state.\n"
"function updateStyle(elem, state) {\n"
"\telem.classList.remove(\"zone-pending-on\");\n"
"\telem.classList.remove(\"zone-pending-off\");\n"
"\telem.classList.remove(\"zone-on\");\n"
"\telem.classList.remove(\"zone-off\");\n"
"\telem.classList.add(\"zone-\" + state);\n"
"}\n"
"\n"
"// Send a request by URL.\n"
"function req(url, method) {\n"
"\tvar xhttp = new XMLHttpRequest();\n"
"\txhttp.open(method || 'GET', url);\n"
"\txhttp.send();\n"
"\treturn xhttp;\n"
"}\n"
"\n"
"// Turn on a pin by ID.\n"
"function on(pin) {\n"
"\treturn req('/on/' + pin);\n"
"}\n"
"\n"
"// Turn off a pin by ID.\n"
"function off(pin) {\n"
"\treturn req('/off/' + pin);\n"
"}\n"
"\n"
"// Read the pin states.\n"
"function update() {\n"
"\tvar xhttp = req(\"/read\");\n"
"\txhttp.onreadystatechange = () => {\n"
"\t\tif (xhttp.readyState == 4 && xhttp.status == 200) {\n"
"\t\t\tlet resp = JSON.parse(xhttp.responseText);\n"
"\t\t\tif (resp.magic == stateMagic) return;\n"
"\t\t\tstateMagic = resp.magic;\n"
"\t\t\tlet pins = resp.pins;\n"
"\t\t\tfor (id in pins) {\n"
"\t\t\t\t// Update the styles.\n"
"\t\t\t\tlet index = idToZone[id];\n"
"\t\t\t\tlet elem = document.getElementById(\"zone_\" + index);\n"
"\t\t\t\tlet value = pins[id].indexOf(\"on\") >= 0;\n"
"\t\t\t\tzones[index].state = value;\n"
"\t\t\t\tupdateStyle(elem, pins[id]);\n"
"\t\t\t}\n"
"\t\t}\n"
"\t};\n"
"\tvar xhttp1 = req(\"/sched_list\");\n"
"\txhttp1.onreadystatechange = () => {\n"
"\t\tif (xhttp1.readyState == 4 && xhttp1.status == 200) {\n"
"\t\t\tlet resp = JSON.parse(xhttp1.responseText);\n"
"\t\t\tdebugschedule(resp.schedule);\n"
"\t\t}\n"
"\t};\n"
"}\n"
"\n"
"// Read the value of a zone by index.\n"
"function read(index) {\n"
"\tvar xhttp = req(\"/read/\" + zones[index].id);\n"
"\txhttp.onreadystatechange = () => {\n"
"\t\tif (xhttp.readyState == 4 && xhttp.status == 200) {\n"
"\t\t\tlet elem = document.getElementById(\"zone_\" + index);\n"
"\t\t\tlet value = xhttp.responseText.indexOf(\"on\") >= 0;\n"
"\t\t\tzones[index].state = value;\n"
"\t\t\tupdateStyle(elem, xhttp.responseText);\n"
"\t\t}\n"
"\t};\n"
"}\n"
"\n"
"// Toggle a zone by index.\n"
"function toggle(elem, index) {\n"
"\tlet zone = zones[index];\n"
"\tlet to = !zone.state;\n"
"\tzone.state = !zone.state;\n"
"\t// To read the state and not with the timer.\n"
"\tvar xhttp;\n"
"\tlet onready = () => {\n"
"\t\tif (xhttp.readyState == 4) {\n"
"\t\t\tlet resp = xhttp.responseText;\n"
"\t\t\tif (resp == \"write_error\") erreur(elem, zone.name + \" kan nu niet \" + (to ? \"aan\" : \"uit\"));\n"
"\t\t\tread(index);\n"
"\t\t}\n"
"\t}\n"
"\t// Send a command.\n"
"\tif (zone.state) {\n"
"\t\tupdateStyle(elem, \"pending-on\");\n"
"\t\txhttp = on(zone.id);\n"
"\t\txhttp.onreadystatechange = onready;\n"
"\t} else {\n"
"\t\tupdateStyle(elem, \"pending-off\");\n"
"\t\txhttp = off(zone.id);\n"
"\t\txhttp.onreadystatechange = onready;\n"
"\t}\n"
"}\n"
"\n"
"// Play the error animation.\n"
"function erreur(elem, msg) {\n"
"\tif (elem) {\n"
"\t\telem.classList.add(\"zone-error\");\n"
"\t\tsetTimeout(() => {\n"
"\t\t\telem.classList.remove(\"zone-error\");\n"
"\t\t}, 500);\n"
"\t}\n"
"\tif (msg) {\n"
"\t\tconsole.log(\"ERREUR:\", msg);\n"
"\t}\n"
"}\n"
"\n"
"// Describe milliseconds as text.\n"
"function desctime(time) {\n"
"\tif (time < 0) {\n"
"\t\treturn \"0\";\n"
"\t}\n"
"\tvar num, unit;\n"
"\tif (time < 60000) {\n"
"\t\tnum = time / 1000;\n"
"\t\tunit = 's';\n"
"\t} else if (time < 3600000) {\n"
"\t\tnum = time / 60000;\n"
"\t\tunit = 'm';\n"
"\t} else {\n"
"\t\tnum = time / 3600000;\n"
"\t\tunit = 'h';\n"
"\t}\n"
"\treturn Math.round(num) + unit;\n"
"}\n"
"\n"
"// Wow!\n"
"function debugschedule(schedule) {\n"
"\tlet now = new Date().getTime();\n"
"\tfor (i in schedule) {\n"
"\t\tvar sched = schedule[i];\n"
"\t\tvar raw = sched.desc + '    Uitzondering: ' + excToDesc[sched.except] + '    ' + desctime(sched.time - now);\n"
"\t\tconsole.log(raw);\n"
"\t}\n"
"}";
char *webpage_file_index_mobile_html =
"<!DOCTYPE html>\n"
"<html>\n"
"\t<head>\n"
"\t\t<title>Bewatersysteem</title>\n"
"\t\t<script src=\"index.js\"></script>\n"
"\t\t<link rel=\"stylesheet\" href=\"index.css\" type=\"text/css\">\n"
"\t</head>\n"
"\t<body onload=\"isMobile=true;loaded()\" class=\"mobile\">\n"
"\t\t<div class=\"content\">\n"
"\t\t\t<h1 style=\"text-align:center\">BEWATERSYSTEEM</h1>\n"
"\t\t\t<div id=\"zones\"></div>\n"
"\t\t</div>\n"
"\t</body>\n"
"</html>";
char *webpage_filenames[4] = {
	"/index.css",
	"/index.html",
	"/index.js",
	"/index_mobile.html",
};
char **webpage_files[4] = {
	&webpage_file_index_css,
	&webpage_file_index_html,
	&webpage_file_index_js,
	&webpage_file_index_mobile_html,
};
